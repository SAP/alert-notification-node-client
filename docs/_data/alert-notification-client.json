{
    "propertyFields": [
        {
            "name": "authentication",
            "type": "[BasicAuthentication](/alert-notification-node-client/authentication/basic) \\| [OAuthAuthentication](/alert-notification-node-client/authentication/oauth)",
            "description": "Used for retrieving authorization header value"
        },
        {
            "name": "region",
            "type": "[Region](/alert-notification-node-client/common-objects/region-utils#region)",
            "description": "Region on which your Alert Notification service instance resides"
        },
        {
            "name": "axiosRequestConfig?",
            "type": "[AxiosRequestConfig](https://github.com/axios/axios)",
            "description": "Used for overwriting the default configuration of the HTTP client"
        },
        {
            "name": "retryConfig?",
            "type": "[RetryConfig](/alert-notification-node-client/common-objects/retry-configuration)",
            "description": "Retry configuration, which enables the retriability of failed requests to Alert Notification service"
        }
    ],
    "methods": [
        {
            "name": "create(type, data)",
            "description": "Creates a single entity, which is of given _type_, with the given _data_ .",
            "arguments": [
                {
                    "name": "type - [EntityType](/alert-notification-node-client/configuration-api-objects/entity-type) (string)",
                    "description": "type of the entity to be created"
                },
                {
                    "name": "data - [Action](/alert-notification-node-client/configuration-api-objects/action) \\| [Condition](/alert-notification-node-client/configuration-api-objects/condition) \\| [Subscription](/alert-notification-node-client/configuration-api-objects/subscription)",
                    "description": "data of the entity to be created"
                }
            ],
            "returnValue": "Promise<[Action](/alert-notification-node-client/configuration-api-objects/action) \\| [Condition](/alert-notification-node-client/configuration-api-objects/condition) \\| [Subscription](/alert-notification-node-client/configuration-api-objects/subscription)>"
        },
        {
            "name": "update(type, data)",
            "description": "Updates the single entity, which is of the given _type_, with the given _data_.",
            "arguments": [
                {
                    "name": "type - [EntityType](/alert-notification-node-client/configuration-api-objects/entity-type) (string)",
                    "description": "type of the entity to be updated"
                },
                {
                    "name": "data - [Action](/alert-notification-node-client/configuration-api-objects/action) \\| [Condition](/alert-notification-node-client/configuration-api-objects/condition) \\| [Subscription](/alert-notification-node-client/configuration-api-objects/subscription)",
                    "description": "data of the entity to be updated"
                }
            ],
            "returnValue": "Promise<[Action](/alert-notification-node-client/configuration-api-objects/action) \\| [Condition](/alert-notification-node-client/configuration-api-objects/condition) \\| [Subscription](/alert-notification-node-client/configuration-api-objects/subscription)>"
        },
        {
            "name": "get(type, name)",
            "description": "Get a single entity with given _name_ of the given _type_",
            "arguments": [
                {
                    "name": "type - [EntityType](/alert-notification-node-client/configuration-api-objects/entity-type) (string)",
                    "description": "type of the searched entity"
                },
                {
                    "name": "name - (string)",
                    "description": "name of the searched entity"
                }
            ],
            "returnValue": "Promise<[Action](/alert-notification-node-client/configuration-api-objects/action) \\| [Condition](/alert-notification-node-client/configuration-api-objects/condition) \\| [Subscription](/alert-notification-node-client/configuration-api-objects/subscription)>"
        },
        {
            "name": "getAll(type, params?)",
            "description": "Get all entities of the given _type_, _params_ argument provides you the ability to change the pagination settings.",
            "arguments": [
                {
                    "name": "type - [EntityType](/alert-notification-node-client/configuration-api-objects/entity-type) (string)",
                    "description": "type of the searched entity"
                },
                {
                    "name": "params? - [CommonQueryParams](/alert-notification-node-client/common-objects/query-params)",
                    "description": "query parameters"
                }
            ],
            "returnValue": "Promise<[PageResponse](/alert-notification-node-client/configuration-api-objects/page-response)<[Action](/alert-notification-node-client/configuration-api-objects/action) \\| [Condition](/alert-notification-node-client/configuration-api-objects/condition) \\| [Subscription](/alert-notification-node-client/configuration-api-objects/subscription)>>"
        },
        {
            "name": "delete(type, name)",
            "description": "Deletes an entity with the given _name_ and of the given _type_.",
            "arguments": [
                {
                    "name": "type - [EntityType](/alert-notification-node-client/configuration-api-objects/entity-type) (string)",
                    "description": "type of the searched entity"
                },
                {
                    "name": "name - (string)",
                    "description": "name of an existent entity"
                }
            ],
            "returnValue": "Promise\\<void\\>"
        },
        {
            "name": "importConfiguration(data)",
            "description": "Imports a configuration. <br><br> _**Note:**_ Your current configuration will be **overwritten**.",
            "arguments": [
                {
                    "name": "data - [Configuration](/alert-notification-node-client/configuration-api-objects/configuration)",
                    "description": "configuration to be imported"
                }
            ],
            "returnValue": "Promise<[Configuration](/alert-notification-node-client/configuration-api-objects/configuration)>"
        },
        {
            "name": "exportConfiguration()",
            "description": "Exports your current configuration.",
            "returnValue": "Promise<[Configuration](/alert-notification-node-client/configuration-api-objects/configuration)>"
        },
        {
            "name": "sendEvent(event)",
            "description": "Will send an event for ingestion to Alert Notification service.",
            "arguments": [
                {
                    "name": "event - [ResourceEvent](/alert-notification-node-client/event-api-objects/resource-event)",
                    "description": "an event to be sent to Alert Notification service"
                }
            ],
            "returnValue": "Promise<[ResourceEvent](/alert-notification-node-client/event-api-objects/resource-event)>"
        },
        {
            "name": "sendEvents(events)",
            "description": "Will send multiple events at once for ingestion to Alert Notification service. <br><br> _**Note:**_ They will be ingested in the order they are sent, starting from the first one.",
            "arguments": [
                {
                    "name": "events - [ResourceEvent](/alert-notification-node-client/event-api-objects/resource-event)[]",
                    "description": "a collection of events to be sent to Alert Notification service"
                }
            ],
            "returnValue": "Promise<[ResourceEvent](/alert-notification-node-client/event-api-objects/resource-event)[]>"
        },
        {
            "name": "getMatchedEvent(eventId, params)",
            "description": "Get a matched event with _eventId_ (received on response) from Alert Notification service store. You can filter the received events by supplying _params_ object.",
            "arguments": [
                {
                    "name": "eventId - (string)",
                    "description": "event id generated by Alert Notification service and returned upon send"
                },
                {
                    "name": "params - [ConsumerQueryParams](/alert-notification-node-client/event-api-objects/consumer-query-parameters)",
                    "description": "query parameters allowed when requesting Alert Notification service consumer API"
                }
            ],
            "returnValue": "Promise<[ConsumerPagedResponse](/alert-notification-node-client/event-api-objects/consumer-paged-response)[]>"
        },
        {
            "name": "getMatchedEvents(params)",
            "description": "Gets all matched events from Alert Notification service store. You can filter the received events by supplying _params_ object.",
            "arguments": [
                {
                    "name": "params - [ConsumerQueryParams](/alert-notification-node-client/event-api-objects/consumer-query-parameters)",
                    "description": "query parameters allowed when requesting Alert Notification service consumer API"
                }
            ],
            "returnValue": "Promise<[ConsumerPagedResponse](/alert-notification-node-client/event-api-objects/consumer-paged-response)[]>"
        },
        {
            "name": "getUndeliveredEvent(eventId, params)",
            "description": "Get an undelivered event with _eventId_ (received on response) from Alert Notification service store. You can filter the received events by supplying _params_ object.",
            "arguments": [
                {
                    "name": "eventId - (string)",
                    "description": "event id generated by Alert Notification service and returned upon send"
                },
                {
                    "name": "params - [ConsumerQueryParams](/alert-notification-node-client/event-api-objects/consumer-query-parameters)",
                    "description": "query parameters allowed when requesting Alert Notification service consumer API"
                }
            ],
            "returnValue": "Promise<[ConsumerPagedResponse](/alert-notification-node-client/event-api-objects/consumer-paged-response)[]>"
        },
        {
            "name": "getUndeliveredEvents(params)",
            "description": "Get all undelivered events from Alert Notification service store. You can filter the received events by supplying _params_ object.",
            "arguments": [
                {
                    "name": "params - [ConsumerQueryParams](/alert-notification-node-client/event-api-objects/consumer-query-parameters)",
                    "description": "query parameters allowed when requesting Alert Notification service consumer API"
                }
            ],
            "returnValue": "Promise<[ConsumerPagedResponse](/alert-notification-node-client/event-api-objects/consumer-paged-response)[]>"
        }
    ]
}