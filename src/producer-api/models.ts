import { CommonQueryParams, PageMetadata } from '../utils/common';

/**
 * @enum {INFO, NOTICE, WARNING, ERROR, FATAL}
 */
export enum Severity {
    INFO = 'INFO',
    NOTICE = 'NOTICE',
    WARNING = 'WARNING',
    ERROR = 'ERROR',
    FATAL = 'FATAL'
}

/**
 * @enum {EXCEPTION, ALERT, NOTIFICATION}
 */
export enum Category {
    ALERT = 'ALERT',
    EXCEPTION = 'EXCEPTION',
    NOTIFICATION = 'NOTIFICATION'
}

export interface AffectedResource {
    /**
     * Name of the affected resource, e.g. application's name
     */
    resourceName: string;
    /**
     * Type of the affected resource, e.g. can be of type 'application'
     */
    resourceType: string;
    /**
     * Resource instance, e.g. could be number of an instance
     */
    resourceInstance?: string;
    /**
     * Tags, any other information related to the affected resource can be
     * added here
     */
    tags?: Record<string, string>;
}

export interface ResourceEvent {
    /**
     * ID of the resource event, it will be populated by SAP Alert Notification service for SAP BTP service and you
     * will have access to it on response
     */
    id?: string;
    /**
     * Describes what the event is about in details.
     */
    body: string;
    /**
     * Self explanatory title, which summarises what the sent event is about.
     */
    subject: string;
    /**
     * Type of the event, e.g. it can be HighCPUUsage, MemoryTooLow, etc.
     */
    eventType: string;
    /**
     * Represents the event impact in the context of the affected resource.
     */
    severity: Severity;
    /**
     * Identifies the category of the event.
     */
    category: Category;
    /**
     * The affected resource for which the event was created.
     */
    resource: AffectedResource;
    /**
     * Event timestamp, represents when it was created in the source, if missing SAP Alert Notification service for SAP BTP
     * will populate it for you and will set the time it was ingested for processing
     */
    eventTimestamp?: number;
    /**
     * Priority of the raised event.
     */
    priority?: number;
    /**
     * Any other useful information about the event.
     *
     * Some useful known tags by SAP Alert Notification service for SAP BTP are:
     * - ans:sourceEventId? - generated by the source, will be used for further stateful interactions with SAP Alert Notification service for SAP BTP
     * - ans:correlationId? - generated by the source in order to correlate this event with other activities or issues
     * - ans:status? - will be used for incient management systems. Possible values: 'CREATE_OR_UPDATE', 'CREATE', 'UPDATE', 'COMMENT' or 'CLOSE'
     * - ans:recommendedActionLink? - a URL that contains details for recommended actions regarding this event
     * - ans:detailsLink? - a URL that contains details for this event, e.g. dashboards showing what triggered it
     */
    tags?: Record<string, string>;
}

export interface ConsumerQueryParameters extends CommonQueryParams {
    severity?: string;
    category?: string;
    eventType?: string;
    resourceName?: string;
    correlationId?: string;
    sourceEventId?: string;
    cacheTimeInterval?: string;
    creationTimeInterval?: string;
    include?: string;
}

export interface ConsumerRequest {
    eventId?: string;
    params?: ConsumerQueryParameters;
}

export interface FailureReason {
    code: number;
    reason: string;
    timestamp: number;
}

export enum DeliveryStatus {
    UNDELIVERED = 'UNDELIVERED',
    MATCHED = 'MATCHED'
}

export interface ConsumerEventMetadata {
    cacheTime: number;
    affectedActionId: string;
    deliveryStatus: DeliveryStatus;
    failureReasons: FailureReason[];
}

export interface ConsumerEvent {
    id: string;
    body: string;
    region: string;
    subject: string;
    eventType: string;
    regionType: string;
    eventTimestamp: number;
    severity: Severity;
    category: Category;
    resource: AffectedResource;
    metadata: ConsumerEventMetadata;
    tags?: Record<string, string>;
    priority?: number;
}

export interface ConsumerPagedResponse {
    responseMetadata: PageMetadata;
    results: ConsumerEvent[];
}
